
==================== FINAL INTERFACE ====================
2016-11-15 18:52:03.023743 UTC

interface main@main:Main 8001
  interface hash: da1d5690bd9d0d600c8ae1f123703d85
  ABI hash: 77b768f2cb5d0e2b8e80b63c235d5307
  export-list hash: b6edda424ef6366ba71b8f978900733d
  orphan hash: a2ae7abb416bad40cb8d0cedf6c08a34
  flag hash: f251a227524aa2814c9f6678cdfa39fb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk
                      QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.0@async-2.1.0-J6Pl8k3L4PKGEpjYdgwiIf base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 hspec-2.2.3@hspec-2.2.3-3A7gcWeDS0m19mITkn1B7w
                      hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq
                      hspec-expectations-0.7.2@hspec-expectations-0.7.2-2hcUzmYSxY99w7X9aRVhtQ
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      quickcheck-io-0.1.3@quickcheck-io-0.1.3-5Hh2GbBZjnpHefdPBp5l4r
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      setenv-0.1.1.3@setenv-0.1.1.3-5zeeXxY3qb3AsPnIgczcsm
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      word-chain-0.1.0.0@word-chain-0.1.0.0-AKHjdcGDePvFQyrr70bdDi
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         quickcheck-io-0.1.3@quickcheck-io-0.1.3-5Hh2GbBZjnpHefdPBp5l4r:Test.QuickCheck.IO
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq:Test.Hspec.Core.Example
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hspec-2.2.3@hspec-2.2.3-3A7gcWeDS0m19mITkn1B7w:Test.Hspec 3008fc44f12ec19c4fa900e0137653ce
import  -/  hspec-2.2.3@hspec-2.2.3-3A7gcWeDS0m19mITkn1B7w:Test.Hspec.Runner 9c62f2fd3eb2a1038a73fc8c4e56e460
import  -/  hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq:Test.Hspec.Core.Runner 034a881e6958254a4c0f2864bbd589c8
import  -/  hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq:Test.Hspec.Core.Spec 32c482e5247461f70a13ee0ebc759327
import  -/  hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq:Test.Hspec.Core.Spec.Monad 2e6f037f2b368cc99aa4cfff92adec68
import  -/  hspec-core-2.2.3@hspec-core-2.2.3-12WIy50J3DO9ac2aAucsOq:Test.Hspec.Options 06f1a5a997a2019a5a33eca438c40b7e
import  -/  hspec-expectations-0.7.2@hspec-expectations-0.7.2-2hcUzmYSxY99w7X9aRVhtQ:Test.Hspec.Expectations ca5f5a50dd0587de1f261c5a819c188f
import  -/  word-chain-0.1.0.0@word-chain-0.1.0.0-AKHjdcGDePvFQyrr70bdDi:WordChain 35ed563f5860c57e614f74eede3dc434
1ecc892395306ff03f98b5069f73183c
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either [GHC.Types.Char] [GHC.Base.String])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char] [GHC.Base.String])
                  (Data.Either.$fEqEither_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Main.$s$fEqEither2
                     Main.$s$fEqEither1)
                  (Data.Either.$fEqEither_$c/=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Main.$s$fEqEither2
                     Main.$s$fEqEither1) -}
515a590f786bc09d2c7a8f253ec1c19d
  $s$fEqEither1 :: GHC.Classes.Eq [GHC.Base.String]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]2 -}
c547b33e1d7de64c32d0d6f356d3c56e
  $s$fEqEither2 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
0e05c0bf5bf5973028c67b518ddc3c49
  $s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char] [GHC.Base.String])
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Main.$s$fShowEither2
                     Main.$s$fShowEither1)
                  (Data.Either.$fShowEither_$cshow
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Main.$s$fShowEither2
                     Main.$s$fShowEither1)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList -}
1da2a745a48fb36ada97bf89072e6159
  $s$fShowEither1 :: GHC.Show.Show [GHC.Base.String]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]2 -}
a86cbe11e026d7883c66771cfe4b29f8
  $s$fShowEither2 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
e39db8ee9f2070b4659c70c473f05a32
  $s$fShowEither_$s$fShowEither_$cshowList ::
    [Data.Either.Either [GHC.Types.Char] [GHC.Base.String]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either [GHC.Types.Char] [GHC.Base.String]])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either [GHC.Types.Char] [GHC.Base.String])
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      Main.$s$fShowEither2
                      Main.$s$fShowEither1
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d1aec0e36f41d007ec5389813198f7ae
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c98be0ea7fbf064b44e85d31ff43c3de
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Options.defaultConfig
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
2e9919cffe715994d7372c87b440bfc7
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1 -}
59ccd8ba9729c124ba23ba4ff8af450b
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fEqEither @ [Char] @ [String]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                      [GHC.Types.Char])
                                                           ($dEq1 :: GHC.Classes.Eq
                                                                       [GHC.Base.String])
  Data.Either.$fEqEither @ [GHC.Types.Char]
                         @ [GHC.Base.String]
                         $dEq
                         $dEq1
  = Main.$s$fEqEither
"SPEC/Main $fShowEither @ [Char] @ [String]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                          [GHC.Types.Char])
                                                             ($dShow1 :: GHC.Show.Show
                                                                           [GHC.Base.String])
  Data.Either.$fShowEither @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           $dShow
                           $dShow1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither_$cshowList @ [Char] @ [String]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                     [GHC.Types.Char])
                                                                        ($dShow1 :: GHC.Show.Show
                                                                                      [GHC.Base.String])
  Data.Either.$fShowEither_$cshowList @ [GHC.Types.Char]
                                      @ [GHC.Base.String]
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

